#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;  // 
layout(rgba32f, binding = 0) uniform writeonly image2D img_output;  // 输出纹理

uniform vec2 u_resolution;  // 纹理分辨率

vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

void main() {
    // 获取全局像素坐标
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 st = vec2(pixel_coords) / u_resolution;
    
    // 保持原有算法逻辑
    st *= 5.0;
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);

    float m_dist = 1.0;
    
    // 3x3 邻域搜索
    for(int y = -1; y <= 1; y++) {
        for(int x = -1; x <= 1; x++) {
            vec2 neighbor = vec2(x, y);
            vec2 point = random2(i_st + neighbor);
            
            vec2 diff = neighbor + point - f_st;
            float dist = length(diff);
            m_dist = min(m_dist, dist);
        }
    }

    // 生成最终颜色
    vec3 color = vec3(m_dist);
    color += 1.0 - step(0.02, m_dist);
    color.r += step(0.98, f_st.x) + step(0.98, f_st.y);

    // 写入存储纹理
    imageStore(img_output, pixel_coords, vec4(color, 1.0));
}